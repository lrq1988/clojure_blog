(use 'pinyin4clj.core)
(pinyin "1d")
(pinyin "22~-d")
(contains? "323-fdsf" "-")
(.indexOf "hello" "h")
(replace "hello" "e")
(reduce #(replace-all %1 %2 "") "121-acb -f23 -" ["-" " "])
(replace "ht" #"t" "a")
(clojure.string/replace "ht" #"t" "a")
(reduce #(clojure.string/replace-all %1 %2 "") "122-3 3ds - " ["-" " "])
(use 'clojure.string)
(clojure.string/replace "thds-fs da -" #"[- ]" "")
(System/currentTimeMillis)
(java.util.Calendar/getInstance)
(def dates (new java.text.SimpleDateFormat£©))
(import 'java.text.SimpleDateFormat)
(def mydate (new java.text.SimpleDateFormat))
(mydate)
mydate
(str mydate)
(println mydate)
(doto mydate)
(def da (new java.util.Date))
(.format mydate da)
(def postdate
)
(defn postdate []
(.format (new java.text.SimpleDateFormat) (new java.util.Date)))
(postdate)
(defn postdates []
)
(def a (new java.text.SimpleDateFormat "yyyy-MM-dd HH:mm:ss"))
(defn postdates []
(.format a (new java.util.Date)))
(postdates)
(str java.util.UUID/randomUUID)
(str (java.util.UUID/randomUUID))
(.length str (java.util.UUID/randomUUID))
(.length (str (java.util.UUID/randomUUID)))
(str (cljure.string/replace "fdsf:=fsd- d-" #"[-: ]" ""))
(str (clojure.string/replace "fs-: d-" #"[-: ]" ""))
(clojure.string/replace "df -" #"[- ]" "")
£¨if-not 10 (println 0))
(.createNewFile (new java.io.File "upload/blog/file/11.txt"))
(.createNewFile (new java.io.File "e:/1.txt"))
(println (noir.io/resource-path))
(use 'noir.io)
(println (noir.io/resource-path))
)
(.createNewFile (new java.io.File (str noir.io/resource-path "/upload/blog/file/1.txt")))
(str noir.io/resource-path "/upload/blog/file/1.txt")
(str (noir.io/resource-path) "/upload/blog/file/1.txt")
(.createNewFile (new java.io.File (str (noir.io/resource-path) "/upload/blog/file/2.txt")))
(.mkdirs (new java.io.File (str (noir.io/resource-path) "/upload/blog/file/2.txt")))
(def mseq ({:id 1 :title 2} {:id 3 :title}))
(def mseq ({:id 1 :title 2} {:id 3 :title 4}))
(take 3 mseq)
(take 2 mseq)
(take 1 mseq)
(def lseq ([{:id 0 :title 01} {:id 00 :title 02}]))
(def lseq [{:id 0 :title 01} {:id 00 :title 02}])
(take 2 lseq)
(take 3 lseq)
(take 1 lseq)
(first (take 1 lseq))
(first (rest (take 2 lseq)))
(vector (take 3 lseq))
(class (take 2 lseq))
(str (take 2 lseqa))
(str (take 2 lseq))
(count (take 3 lseq))
(nth lseq 2)
(nth lseq 1)
(take 1 lseq)
